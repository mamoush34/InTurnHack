{"version":3,"sources":["logo.svg","messaging.ts","authorization.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","messageActiveTab","message","a","async","tabParameters","active","currentWindow","Promise","resolve","chrome","tabs","query","target","id","sendMessage","getToken","identity","getAuthToken","interactive","logout","token","alert","window","fetch","response","console","text","log","removeCachedAuthToken","getUserInfo","x","XMLHttpRequest","open","onload","JSON","parse","send","App","observer","login","userInfo","runInAction","close","apply","email","action","user","this","className","renderUserHeader","onClick","style","background","logo","margin","picture","src","React","Component","observable","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,kC,wPCApC,SAAeC,EAAiBC,GAAhC,eAAAC,EAAAC,OAAA,uDACGC,EAAgB,CAAEC,QAAQ,EAAMC,eAAe,GADlD,kBAEI,IAAIC,SAAa,SAAAC,GACpBC,OAAOC,KAAKC,MAAMP,GAAe,SAAAM,GAC7B,IAAME,EAASF,EAAK,GAAGG,GACvBJ,OAAOC,KAAKI,YAAYF,EAAQX,EAASO,UAL9C,qCCAP,SAAeO,IAAf,SAAAb,EAAAC,OAAA,yEACW,IAAII,SAAgB,SAAAC,GAAO,OAAIC,OAAOO,SAASC,aAAa,CAAEC,aAAa,GAAQV,OAD9F,qCAIO,SAAeW,IAAf,iBAAAjB,EAAAC,OAAA,kEAAAD,EAAA,MACiBa,KADjB,UACGK,EADH,8BAGCC,MAAM,uBAHP,4CAAAnB,EAAA,MAMoBoB,OAAOC,MAAP,4DAAkEH,KANtF,cAMGI,EANH,YAOHC,QAPG,YAAAvB,EAAA,MAOesB,EAASE,QAPxB,gCAOKC,IAPL,kCAQI,IAAIpB,SAAc,SAAAC,GAAO,OAAIC,OAAOO,SAASY,sBAAsB,CAAER,SAASZ,OARlF,sCAmBA,SAAeqB,IAAf,eAAA3B,EAAAC,OAAA,uDACC2B,EAAI,IAAIC,eADT,KAEHD,EAFG,uFAAA5B,EAAA,MAEwFa,KAFxF,gEAEDiB,KAFC,UAEI,MAFJ,wBAGI,IAAIzB,SAAkB,SAAAC,GACzBsB,EAAEG,OAAS,kBAAMzB,EAAQ0B,KAAKC,MAAML,EAAEN,YACtCM,EAAEM,WALH,qC,0CCdcC,EADpBC,a,yPAQWC,MAAQ,0BAAArC,EAAAC,OAAA,kEAAAD,EAAA,MACW2B,KADX,OACNW,EADM,OAEZC,aAAY,kBAAM,EAAKD,SAAWA,KAFtB,sC,EAKRrB,OAAS,oBAAAjB,EAAAC,OAAA,kEAAAD,EAAA,MACPiB,KADO,OAEbG,OAAOoB,QAFM,sC,EAKTC,MAAQ,8BAAAzC,EAAAC,OAAA,oEACJqC,EADI,EACJA,SADI,yCAGDnB,MAAM,mFAHL,cAKJuB,EAAUJ,EAAVI,MALI,WAAA1C,EAAA,MAMNF,EAAiB,CACnB6C,OAAQ,wBACRC,KAAMF,KARE,yBAAA1C,EAAA,MAUWF,EAAiB,CACpC6C,OAAQ,uBACRC,KAAMF,KAZE,QAcK,IAdL,QAeRvB,MAAM,gDAfE,uC,oFAbZ0B,KAAKR,U,+BAiDL,OAAKQ,KAAKP,SAMN,yBAAKQ,UAAU,OACVD,KAAKE,iBACN,4BAAQD,UAAU,cACd,uBACIA,UAAW,oBACXE,QAASH,KAAKJ,OAFlB,mCAOJ,0BAAMK,UAAW,UAAWE,QAASH,KAAK5B,QAA1C,YAdA,yBAAKgC,MAAO,CAAEC,WAAW,OAAD,OAASC,IAAT,KAAkBC,OAAQ,Q,uCAlB1D,IAAKP,KAAKP,SACN,OAAQ,KAFe,MAIAO,KAAKP,SAAxBI,EAJmB,EAInBA,MAAOW,EAJY,EAIZA,QACf,OACI,oCACI,yBACIP,UAAW,YACXQ,IAAKD,IAET,0BAAMP,UAAW,SAAUJ,Q,GA/CVa,IAAMC,W,sCAClCC,K,uECEeC,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ad803772.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","export async function messageActiveTab(message: any) {\n    const tabParameters = { active: true, currentWindow: true };\n    return new Promise<any>(resolve => {\n        chrome.tabs.query(tabParameters, tabs => {\n            const target = tabs[0].id!;\n            chrome.tabs.sendMessage(target, message, resolve);\n        });\n    });\n} ","async function getToken(): Promise<string> {\n    return new Promise<string>(resolve => chrome.identity.getAuthToken({ interactive: true }, resolve));\n}\n\nexport async function logout(): Promise<void> {\n    const token = await getToken();\n    if (!token) {\n        alert(\"Already logged out!\");\n        return;\n    }\n    const response = await window.fetch(`https://accounts.google.com/o/oauth2/revoke?token=${token}`);\n    console.log(await response.text());\n    return new Promise<void>(resolve => chrome.identity.removeCachedAuthToken({ token }, resolve));\n}\n\nexport interface UserInfo {\n    id: string;\n    email: string;\n    verified_email: boolean;\n    picture: string;\n    hd: string;\n}\n\nexport async function getUserInfo() {\n    var x = new XMLHttpRequest();\n    x.open('GET', `https://www.googleapis.com/oauth2/v1/userinfo?alt=json&access_token=${await getToken()}`);\n    return new Promise<UserInfo>(resolve => {\n        x.onload = () => resolve(JSON.parse(x.response));\n        x.send();\n    });\n}","import React from 'react';\nimport './App.css';\nimport { messageActiveTab } from './messaging';\nimport { logout, getUserInfo, UserInfo } from './authorization';\nimport { observable, runInAction } from 'mobx';\nimport { observer } from 'mobx-react';\nimport logo from \"./logo.svg\";\n\n@observer\nexport default class App extends React.Component<{}> {\n    @observable private userInfo?: UserInfo;\n\n    componentWillMount() {\n        this.login();\n    }\n\n    private login = async () => {\n        const userInfo = await getUserInfo();\n        runInAction(() => this.userInfo = userInfo);\n    }\n\n    private logout = async () => {\n        await logout();\n        window.close();\n    }\n\n    private apply = async () => {\n        const { userInfo } = this;\n        if (!userInfo) {\n            return alert(\"This session is not associated with a valid user. Please retry authentication.\");\n        }\n        const { email } = userInfo;\n        await messageActiveTab({\n            action: \"__logApplicationEntry\",\n            user: email\n        });\n        const response = await messageActiveTab({\n            action: \"__openEmbeddedBoards\",\n            user: email\n        });\n        if (response === false) {\n            alert(\"No embedded greenhouse.io content was found.\");\n        }\n    };\n\n    private get renderUserHeader() {\n        if (!this.userInfo) {\n            return (null);\n        }\n        const { email, picture } = this.userInfo;\n        return (\n            <>\n                <img\n                    className={\"user-icon\"}\n                    src={picture}\n                />\n                <span className={\"email\"}>{email}</span>\n            </>\n        );\n    }\n\n    render() {\n        if (!this.userInfo) {\n            return (\n                <div style={{ background: `url(${logo})`, margin: 50 }} />\n            );\n        }\n        return (\n            <div className=\"App\">\n                {this.renderUserHeader}\n                <header className=\"App-header\">\n                    <p\n                        className={\"greenhouse-prompt\"}\n                        onClick={this.apply}\n                    >\n                        Capture and begin application!\n                    </p>\n                </header>\n                <span className={\"log-out\"} onClick={this.logout}>Log Out</span>\n            </div>\n        );\n    }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}