{"version":3,"sources":["logo.svg","messaging.ts","authorization.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","messageActiveTab","message","a","async","tabParameters","active","currentWindow","Promise","resolve","chrome","tabs","query","target","id","sendMessage","getToken","identity","getAuthToken","interactive","logout","token","alert","window","fetch","removeCachedAuthToken","App","observer","login","runInAction","close","onClick","action","success","console","log","setTimeout","email","this","className","style","background","logo","margin","React","Component","observable","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,kC,wPCApC,SAAeC,EAAiBC,GAAhC,eAAAC,EAAAC,OAAA,uDACGC,EAAgB,CAAEC,QAAQ,EAAMC,eAAe,GADlD,kBAEI,IAAIC,SAAa,SAAAC,GACpBC,OAAOC,KAAKC,MAAMP,GAAe,SAAAM,GAC7B,IAAME,EAASF,EAAK,GAAGG,GACvBJ,OAAOC,KAAKI,YAAYF,EAAQX,EAASO,UAL9C,qCCAA,SAAeO,IAAf,SAAAb,EAAAC,OAAA,yEACI,IAAII,SAAgB,SAAAC,GAAO,OAAIC,OAAOO,SAASC,aAAa,CAAEC,aAAa,GAAQV,OADvF,qCAIA,SAAeW,EAAOC,GAAtB,SAAAlB,EAAAC,OAAA,mDACEiB,EADF,uBAECC,MAAM,uBAFP,iCAKHC,OAAOC,MAAP,4DAAkEH,IAL/D,kBAMI,IAAIb,SAAc,SAAAC,GAAO,OAAIC,OAAOO,SAASQ,sBAAsB,CAAEJ,SAASZ,OANlF,qC,0CCKciB,EADpBC,a,sPAQWC,MAAQ,0BAAAzB,EAAAC,OAAA,kEAAAD,EAAA,MACQa,KADR,OACNK,EADM,OAEZQ,aAAY,kBAAM,EAAKR,MAAQA,KAFnB,sC,EAKRD,OAAS,0BAAAjB,EAAAC,OAAA,qDACPiB,EAAQ,EAAKA,OADN,kCAAAlB,EAAA,MAGHiB,EAAOC,IAHJ,OAITE,OAAOO,QAJE,sC,EAQTC,QAAU,0BAAA5B,EAAAC,OAAA,kEAAAD,EAAA,MACQF,EAAiB,CAAE+B,OAAQ,6BADnC,OACRC,EADQ,OAEdC,QAAQC,IAAIF,EAAU,iCAAmC,gDACzDG,YAAW,WACPnC,EAAiB,CAAE+B,OAAQ,cAAeK,MAAO,8BAClD,KALW,sC,oFAhBdC,KAAKV,U,+BA0BL,OADcU,KAAKjB,MAOf,yBAAKkB,UAAU,OACX,4BAAQA,UAAU,cACd,uBACIA,UAAW,oBACXR,QAASO,KAAKP,SAFlB,6DAMA,0BAAMA,QAASO,KAAKlB,QAApB,aAZJ,yBAAKoB,MAAO,CAAEC,WAAW,OAAD,OAASC,IAAT,KAAkBC,OAAQ,U,GAhCjCC,IAAMC,W,mCAClCC,K,+ECEeC,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0800e55b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","export async function messageActiveTab(message: any) {\n    const tabParameters = { active: true, currentWindow: true };\n    return new Promise<any>(resolve => {\n        chrome.tabs.query(tabParameters, tabs => {\n            const target = tabs[0].id!;\n            chrome.tabs.sendMessage(target, message, resolve);\n        });\n    });\n} ","export async function getToken(): Promise<string> {\n    return new Promise<string>(resolve => chrome.identity.getAuthToken({ interactive: true }, resolve));\n}\n\nexport async function logout(token: string): Promise<void> {\n    if (!token) {\n        alert(\"Already logged out!\");\n        return;\n    } \n    window.fetch(`https://accounts.google.com/o/oauth2/revoke?token=${token}`);\n    return new Promise<void>(resolve => chrome.identity.removeCachedAuthToken({ token }, resolve));\n}","import React from 'react';\nimport './App.css';\nimport { messageActiveTab } from './messaging';\nimport { getToken, logout } from './authorization';\nimport { observable, runInAction } from 'mobx';\nimport { observer } from 'mobx-react';\nimport logo from \"./logo.svg\";\n\n@observer\nexport default class App extends React.Component<{}> {\n    @observable private token: string | undefined = undefined;\n\n    componentWillMount() {\n        this.login();   \n    }\n    \n    private login = async () => {\n        const token = await getToken();\n        runInAction(() => this.token = token);\n    }\n\n    private logout = async () => {\n        const token = this.token;\n        if (token) {\n            await logout(token);\n            window.close();\n        }\n    }\n\n    private onClick = async () => {\n        const success = await messageActiveTab({ action: \"searchForEmbeddedBoards\" });\n        console.log(success ? 'Successfully opened job board.' : 'No embedded greenhouse.io content was found.')\n        setTimeout(() => {\n            messageActiveTab({ action: \"inquireUser\", email: \"samwilkins333@gmail.com\" });\n        }, 3000);\n    };\n\n    render() {\n        const token = this.token;\n        if (!token) {\n            return (\n                <div style={{ background: `url(${logo})`, margin: 50 }} />\n            );\n        }\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <p\n                        className={\"greenhouse-prompt\"}\n                        onClick={this.onClick}\n                    >\n                        Check page for embedded greenhouse.io application boards.\n                    </p>\n                    <span onClick={this.logout}>Log Out</span>\n                </header>\n            </div>\n        );\n    }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}